#x#!/usr/bin/python3.6
# -*- coding: utf-8 -*-

import rospy
import json
import os
import threading
from enum import Enum
from std_msgs.msg import String
from std_msgs.msg import UInt16
from std_msgs.msg import ColorRGBA 

import control_msgs.msg
from skrobot.interfaces.ros.base import ROSRobotInterfaceBase
from skrobot.model import RobotModel
from skrobot.viewers import TrimeshSceneViewer
from skrobot.utils.urdf import resolve_filepath
import numpy as np

import actionlib
import actionlib_msgs.msg
from kxr_controller.msg import ServoOnOffAction
from kxr_controller.msg import ServoOnOffGoal


class ArmROSRobotInterface(ROSRobotInterfaceBase):

    def __init__(self, *args, **kwargs):
        namespace = kwargs.get('namespace', None)
        namespace = '/{}'.format(namespace) if namespace else ''
        self.joint_names = rospy.get_param(
            namespace
            + '/kxr_fullbody_controller/joints')
        super(ArmROSRobotInterface, self).__init__(*args, **kwargs)
        self.servo_on_off_client = actionlib.SimpleActionClient(
            namespace + '/kxr_fullbody_controller/servo_on_off',
            ServoOnOffAction)
        self.servo_on_off_client.wait_for_server()

    def servo_on(self, joint_names=None):
        if joint_names is None:
            joint_names = self.joint_names
        goal = ServoOnOffGoal()
        client = self.servo_on_off_client
        if client.get_state() == actionlib_msgs.msg.GoalStatus.ACTIVE:
            client.cancel_goal()
            client.wait_for_result(timeout=rospy.Duration(10))
        self.angle_vector(self.angle_vector(), 0.1)
        self.wait_interpolation()
        rospy.sleep(1.0)
        goal.joint_names = joint_names
        goal.servo_on_states = [True] * len(joint_names)
        client.send_goal(goal)

    def servo_off(self, joint_names=None):
        if joint_names is None:
            joint_names = self.joint_names
        goal = ServoOnOffGoal()
        client = self.servo_on_off_client
        if client.get_state() == actionlib_msgs.msg.GoalStatus.ACTIVE:
            client.cancel_goal()
            client.wait_for_result(timeout=rospy.Duration(10))
        goal.joint_names = joint_names
        goal.servo_on_states = [False] * len(joint_names)
        client.send_goal(goal)

    @property
    def fullbody_controller(self):
        return dict(
            controller_type='kxr_fullbody_controller',
            controller_action='kxr_fullbody_controller/follow_joint_trajectory',
            controller_state='kxr_fullbody_controller/state',
            action_type=control_msgs.msg.FollowJointTrajectoryAction,
            joint_names=self.joint_names,
        )

    def default_controller(self):
        return [self.fullbody_controller]

rospy.init_node('interface_controller')
r = RobotModel()
urdf_path = resolve_filepath("", "package://kxr_models/urdf/kuromitsu.urdf")
with open(urdf_path) as f:
    r.load_urdf_file(f)

for j in r.joint_list:
    if j.max_joint_velocity == 0.0:
        j.max_joint_velocity = 10.0
ri = ArmROSRobotInterface(r, controller_timeout=1000)



def eye(mode=0):
    eye_pub = rospy.Publisher("/eye_status", UInt16, queue_size=1)

    rospy.init_node("eye_node")
    mode_msg = UInt16()
    mode_msg.data = mode
    
    eye_pub.publish(mode_msg)


def cheek_led(r,g,b,brightness=10,mode=1,blink=3,duration=1,rainbow_hue=1):

    
    led_blink_pub = rospy.Publisher("/led_blink_time", UInt16, queue_size=1)
    led_duration = rospy.Publisher("/led_duration", UInt16, queue_size=1)
    led_mode = rospy.Publisher("/led_mode", UInt16, queue_size=1)
    led_rainbow_delta_hue = rospy.Publisher("/led_rainbow_delta_hue", UInt16, queue_size=1)
    led_rgb = rospy.Publisher("/led_rgb", ColorRGBA, queue_size=1)

    rospy.init_node("led_node")
    color = ColorRGBA()
    color.r = r
    color.g = g
    color.b = b
    color.a = brightness

    blink_msg = UInt16()
    duration_msg = UInt16()
    mode_msg = UInt16()
    rainbow_hue_msg = UInt16()

    blink_msg.data = blink
    duration_msg.data = duration
    mode_msg.data = mode
    rainbow_hue_msg.data = rainbow_hue
    
    led_blink_pub.publish(blink_msg)
    led_duration.publish(duration_msg)
    led_mode.publish(mode_msg)
    led_rainbow_delta_hue.publish(rainbow_hue_msg)
    led_rgb.publish(color)


def ume_led(r,g,b,brightness=10,mode=1,blink=3,duration=1,rainbow_hue=1):
    
    led_blink_pub = rospy.Publisher("/led_blink_time", UInt16, queue_size=1)
    led_duration = rospy.Publisher("/led_duration", UInt16, queue_size=1)
    led_mode = rospy.Publisher("/led_mode", UInt16, queue_size=1)
    led_rainbow_delta_hue = rospy.Publisher("/led_rainbow_delta_hue", UInt16, queue_size=1)
    led_rgb = rospy.Publisher("/led_rgb", ColorRGBA, queue_size=1)

    rospy.init_node("led_node")
    color = ColorRGBA()
    color.r = r
    color.g = g
    color.b = b
    color.a = brightness

    blink_msg = UInt16()
    duration_msg = UInt16()
    mode_msg = UInt16()
    rainbow_hue_msg = UInt16()

    blink_msg.data = blink
    duration_msg.data = duration
    mode_msg.data = mode
    rainbow_hue_msg.data = rainbow_hue
    
    led_blink_pub.publish(blink_msg)
    led_duration.publish(duration_msg)
    led_mode.publish(mode_msg)
    led_rainbow_delta_hue.publish(rainbow_hue_msg)
    led_rgb.publish(color)
    

        

def act(act_name):
    json_filepath = "/home/ichikura/test-1219.json"
    if os.path.exists(json_filepath):
        try:
            with open(json_filepath) as f:
                motion_dict = json.load(f)
        except json.JSONDecodeError as e:
            print(e)

        if len(motion_dict) > 0:
            angles = motion_dict[act_name]

            if len(angles) > 0:
                ri.angle_vector(angles[0],3)
                ri.wait_interpolation()
            for av in angles[1:]:
                ri.angle_vector(av,0.1)

    else:
        print("There is not such file.")    
    
    
